const { OpenAIClient, AzureKeyCredential } = require("@azure/openai");

const client = new OpenAIClient(
  "https://devcodeai.openai.azure.com/", 
  new AzureKeyCredential("cc6fbbeb2a99477caff36a3561413c0f")
);

export default async function (req, res) {
  const text = req.body.text || '';
  if (text.trim().length === 0) {
    res.status(400).json({
      error: {
        message: "Please enter a valid text",
      }
    });
    return;
  }

  try {
    const prompt = generatePrompt(text);
    const { id, created, choices, usage } = await client.getChatCompletions(
      "gpt35turbo",
      prompt,
      '2023-07-01-preview'
    );

    res.status(200).json({ result: choices[0].message.content });
  } catch(error) {
    console.error(`Error with OpenAI API request: ${error.message}`);
    res.status(500).json({
      error: {
        message: 'An error occurred during your request.',
      }
    });
  }
}

function generatePrompt ( prompt )
{
  const systemPrompt = `
      You are a virtual assistant tasked with generating complex programming logic test cases. Your task is to respond with a validated JSON format containing the title, task description, and examples of the coding logic test. The coding logic test will be in Bahasa Indonesia. For each coding logic test, you must provide a minimum of 4 positive test cases and include two simple test cases along with the step-by-step solution for the related cases. Also, please note that for each coding logic test that you generate, please limit the data type to primitive types only (integer, boolean, string, and/or array). Please provide a clear and functional code example in TypeScript, including comments and meaningful variable names, and also include parameters, as these are used for testing the code we have. Make sure to use straightforward function names. In our test code, we are not able to use two-dimensional arrays, arrays of arrays, and arrays of objects, but other arrays are acceptable, and also, the function should not have more than one.

      RULES FOR YOU:
      - You can create coding logic tests or refer to https://ioinformatics.org/.
      - The instructions must be long and clear for the user to solve.
      - Do not provide random result examples like 'randomize the array contents' because in our program tests, we must check if the result is consistent.
      - You cannot create a function without parameters, such as 'totalEpisode()'. - You can change this to 'totalEpisode(seasons: array)' or 'totalEpisode(season1: number, season2: number)' or whatever you prefer and connect it to the context of the question.
      - If the output is a float, then it can only be rounded to a maximum of two decimal places. Make sure the generated code also handles rounding to two decimal digits.
      - Do not return null values.
      - Do not provide arrays of objects.
      - Do not use 'bebas' as a data type parameter.
      - Provide logic test references from large companies such as Google, Alibaba, etc., where these companies test new programs.

      After you generate test cases for each coding logic test, check the number of test cases you have generated. If the number is less than 4, automatically add additional test cases with relevant input and output values to ensure there are at least 4 test cases. Also, check that the test cases do not have any empty values. If there are empty values, please remove them and replace them with new test cases.

      For the primitive data types, please note the following:
      - For strings, enclose string values within double quotation marks.
      - For integers, simply provide the numeric value without any quotation marks.
      - For floats, simply provide the numeric value without any quotation marks, using '.' as the decimal separator.
      - For booleans, use the keywords 'true' or 'false' without any quotation marks.
      - For arrays, enclose the array values within square brackets, with each value separated by a comma.
      - For arrays, the values can only be primitive data types (integer, float, boolean, or string). For example: array of integers: [1, 2, 3, 4, 5], array of strings: ['apple', 'banana', 'cherry', 'durian', 'eggplant'], array of booleans: [true, false, true, false, true], array of floats: [3.14, 2.71, 1.41, 1.61, 1.73].
      - To ensure appropriate difficulty levels for the questions, categorization into easy, medium, and hard is crucial, based on the user's needs. If the user's preference is not specified, the default option is to randomize the difficulty level among these three categories.

      In addition, it's worth considering that the length of the question description and the length of function implementation also play a major role in determining the difficulty level. Typically, harder questions tend to have longer descriptions and longer function implementations, providing more complex requirements and requiring a greater level of comprehension and logic analysis to solve. This correlation between question difficulty, description length, and function implementation length can further aid in categorizing questions accurately.
    `
  
  // Create an array of message objects with roles and content
  const messages = [
    {
          role: "system",
          content: systemPrompt,
        },
        {
          role: "user",
          content:
            "logic test rumit, pemecahan kode",
        },
        {
          role: "assistant",
          content: `[\n    {\n        \"title\": \"Fibonacci Shift Cipher\",\n        \"description\": \"**Nama Soal**: Fibonacci Shift Cipher.\\n\\n**Deskripsi**: Challenge test ini akan menguji kemampuanmu dalam mengimplementasikan Shift Cipher menggunakan bilangan Fibonacci. Shift Cipher adalah salah satu metode enkripsi sederhana yang menggeser setiap huruf dalam sebuah teks sejauh n posisi ke kanan dalam alfabet. Dalam challenge ini, kamu akan menggunakan bilangan Fibonacci sebagai jumlah geseran untuk setiap huruf dalam teks.\\n\\n**Aturan**:\\n- Buatlah sebuah function dengan nama fibonacciCipher yang menerima sebuah parameter bertipe string **teks**\\n- input **teks** berupa alfabet kapital [A-Z] dan tidak mengandung karakter lain.\\n- Function harus mengembalikan teks yang telah dienkripsi menggunakan Shift Cipher dengan menggunakan bilangan Fibonacci sebagai jumlah geseran.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input teks adalah 'HELLO'.\\n\\n Maka, Bilangan Fibonacci adalah : 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233.\\n1. H -> geser sebanyak 1 huruf = I\\n2. E -> geser sebanyak 1 huruf = F\\n3. L -> geser sebanyak 2 huruf = N\\n4. L -> geser sebanyak 3 huruf = O\\n5. O -> geser sebanyak 5 huruf = T\\n6. output = '**IFNOT**'\",\n        \"difficultyLevel\": 3,\n        \"timeEstimationToFinish\": \"10 minutes\",\n        \"hashtags\": \"programming, elementary grade, algorithm, mathematics\",\n        \"inputParameter\": [\n            {\n                \"name\": \"teks\",\n                \"typeData\": \"string\"\n            }\n        ],\n        \"expectedTypeData\": \"string\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"teks\": \"HELLO\"\n                },\n                \"expectedValue\": \"IFNOT\"\n            },\n            {\n                \"inputParameter\": {\n                    \"teks\": \"TESTING BAHASA\"\n                },\n                \"expectedValue\": \"UFUWNVT JDSORN\"\n            },\n            {\n                \"inputParameter\": {\n                    \"teks\": \"THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG\"\n                },\n                \"expectedValue\": \"UIG VCVXS MFNJZ QYS JZRZH CIFF WZZ TVCW COF\"\n            },\n            {\n                \"inputParameter\": {\n                    \"teks\": \"LOREM IPSUM DOLOR SIT AMET\"\n                },\n                \"expectedValue\": \"MPTHR VKAXX CBXNC NNT FWTS\"\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function fibonacciCipher(teks: string): string {\\n\\t// replace the return value below with your answer\\n\\tlet shifted = \\\"\\\";\\n\\tconst shift: number[] = fibonacci(teks.length)\\n\\tfor (let i = 0; i < teks.length; i++) {\\n\\t\\tconst char = teks[i];\\n\\t\\tif (char >= 'A' && char <= 'Z') {\\n\\t\\t\\tshifted += String.fromCharCode(((char.charCodeAt(0) - 65 + shift[i] + 26) % 26) + 65);\\n\\t\\t}else{\\n\\t\\t\\tshifted += char\\n\\t\\t}\\n\\t  }\\n\\t\\n\\treturn shifted;\\n}\\n\\nfunction fibonacci(n: number): number[]{\\n\\tconst arr: number[] = []\\n\\tif (n >= 1) arr.push(1)\\n\\n\\tif (n>=2){\\n\\t\\tlet i = 0\\n\\t\\twhile (i < n - 1){\\n\\t\\t\\tlet x = arr[i]\\n\\t\\t\\tlet y = arr[i-1] || 0\\n\\t\\t\\tarr.push(x + y)\\n\\t\\t\\ti++\\n\\t\\t}\\n\\t}\\n\\treturn arr\\n}\",\n            \"language\": \"Typescript\",\n            \"functionName\": \"fibonacciCipher\"\n        }\n    }\n]`,
    },{
          role: "user",
          content:
            "penjumlahan",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Naik Anak Tangga\",\n        \"description\": \"**Nama Soal**: Naik Anak Tangga.\\n\\n**Deskripsi**: Challenge ini aka menguji kemampuanmu untuk menemukan jumlah langkah minimal yang diperlukan untuk mencapai sebuah anak tangga tujuan. Kamu diberikan informasi tentang posisi anak tangga tujuan dan jarak maksimum yang dapat kamu lompati dalam satu langkah. Kamu hanya bisa menaiki anak tangga dengan melangkah satu per satu atau dengan melompat sejauh jarak maksimum yang diberikan. Kamu harus menghitung berapa jumlah langkah paling sedikit yang diperlukan untuk mencapai anak tangga yang menjadi target.\\n\\n**Aturan**:\\n- Buatlah sebuah function dengan nama jumlahLangkahMinimal yang akan menerima dua buah parameter: anakTanggaTujuan (integer) dan loncatan (integer).\\n- Function ini harus mengembalikan jumlah langkah minimal yang diperlukan untuk mencapai anak tangga tujuan.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input anakTanggaTujuan bernilai 8 dan loncatan bernilai 3. Dalam kasus ini, hasil yang diperoleh adalah 4. Hasil ini diperoleh dengan cara sebagai berikut:\\n      \\n\\`\\`\\`\\n      Awal = 0\\n      Langkah pertama: 0 + 3 = 3 (Ambil loncatan)\\n      Langkah kedua: 3 + 3 = 6 (Ambil loncatan)\\n      Langkah ketiga: 6 + 1 = 7 (Loncatan akan menyebabkan ia melewati anak tangga yang dia inginkan. Oleh karena itu dia naik 1 saja)\\n      Langkah keempat: 7 + 1 = 8 (Loncatan akan menyebabkan ia melewati anak tangga yang dia inginkan. Oleh karena itu dia naik 1 saja)\\n      Total langkah yang diperlukan adalah 4\\n\\`\\`\\`\\n\\n- Kita ambil kasus dimana parameter input anakTanggaTujuan bernilai 15 dan loncatan bernilai 4. Dalam kasus ini, hasil yang diperoleh adalah 6. Hasil ini diperoleh dengan cara berikut:\\n      \\n\\`\\`\\`\\n      Awal = 0\\n      Langkah pertama: 0 + 4 = 4 (Ambil loncatan)\\n      Langkah kedua: 4 + 4 = 8 (Ambil loncatan)\\n      Langkah ketiga: 8 + 4 = 12 (Ambil loncatan)\\n      Langkah keempat: 12 + 1 = 13 (Loncatan akan menyebabkan ia melewati anak tangga yang dia inginkan. Oleh karena itu dia naik 1 saja)\\n      Langkah kelima: 13 + 1 = 14 (Loncatan akan menyebabkan ia melewati anak tangga yang dia inginkan. Oleh karena itu dia naik 1 saja)\\n      Langkah keenam: 14 + 1 = 15 (Loncatan akan menyebabkan ia melewati anak tangga yang dia inginkan. Oleh karena itu dia naik 1 saja)\\n      Total langkah yang diperlukan adalah 6\n\\`\\`\\`\",\n        \"difficultyLevel\": 3,\n        \"timeEstimationToFinish\": \"10 minutes\",\n        \"hashtags\": \"programming, elementary grade, algorithm, mathematics\",\n        \"inputParameter\": [\n            {\n                \"name\": \"anakTanggaTujuan\",\n                \"typeData\": \"integer\"\n            },\n            {\n                \"name\": \"loncatan\",\n                \"typeData\": \"integer\"\n            }\n        ],\n        \"expectedTypeData\": \"integer\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"anakTanggaTujuan\": 8,\n                    \"loncatan\": 3\n                },\n                \"expectedValue\": 4\n            },\n            {\n                \"inputParameter\": {\n                    \"anakTanggaTujuan\": 15,\n                    \"loncatan\": 4\n                },\n                \"expectedValue\": 6\n            },\n            {\n                \"inputParameter\": {\n                    \"anakTanggaTujuan\": 4,\n                    \"loncatan\": 2\n                },\n                \"expectedValue\": 2\n            },\n            {\n                \"inputParameter\": {\n                    \"anakTanggaTujuan\": 3,\n                    \"loncatan\": 4\n                },\n                \"expectedValue\": 3\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function jumlahLangkahMinimal(anakTanggaTujuan, loncatan) {\\n    if (anakTanggaTujuan%loncatan == 0) {\\n        return anakTanggaTujuan/loncatan\\n    } else {\\n        return (Math.floor ((anakTanggaTujuan/loncatan) + (anakTanggaTujuan%loncatan)) )\\n    }\\n}\",\n            \"language\": \"Typescript\",\n            \"functionName\": \"jumlahLangkahMinimal\"\n        }\n    }\n]",
    },
    {
          role: "user",
          content:
            "penjumlahan",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Penjumlahan biner\",\n        \"description\": \"**Nama Soal**: Penjumlahan biner.\\n\\n**Deskripsi**: Challenge ini akan menguji kemampuanmu dalam operasi penjumlahan dua bilangan biner. Diberikan dua buah bilangan biner dalam bentuk string, kamu diminta untuk menjumlahkan kedua bilangan tersebut dan mengembalikan hasil penjumlahannya dalam bentuk string juga.\\n\\n**Aturan**:\\n- Buatlah sebuah function dengan nama binaryAddition yang menerima dua parameter bertipe string.\\n- Function harus mengembalikan hasil penjumlahan kedua bilangan biner dalam bentuk string.\\n- Input bilangan biner akan terdiri dari 0 dan 1 saja.\\n- Input bilangan biner tidak akan kosong.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input bilangan1 berisi '1010' dan bilangan2 berisi '1101'. Dalam kasus ini, hasil yang diperoleh adalah '10111'. Penjelasan lanjutan: Lakukan penjumlahan bilangan biner, 1010 + 1101 = 10111, maka kembalikanlah '10111'.\\n- Kita ambil kasus dimana parameter input bilangan1 berisi '11' dan bilangan2 berisi '1'. Dalam kasus ini, hasil yang diperoleh adalah '100'. Penjelasan lanjutan: Lakukan penjumlahan bilangan biner, 11 + 1 = 100, maka kembalikanlah '100'.\",\n        \"difficultyLevel\": 3,\n        \"timeEstimationToFinish\": \"10 minutes\",\n        \"hashtags\": \"Binary, String Manipulation, Logic\",\n        \"inputParameter\": [\n            {\n                \"name\": \"bilangan1\",\n                \"typeData\": \"string\"\n            },\n            {\n                \"name\": \"bilangan2\",\n                \"typeData\": \"string\"\n            }\n        ],\n        \"expectedTypeData\": \"string\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"bilangan1\": \"1010\",\n                    \"bilangan2\": \"1101\"\n                },\n                \"expectedValue\": \"10111\"\n            },\n            {\n                \"inputParameter\": {\n                    \"bilangan1\": \"11\",\n                    \"bilangan2\": \"1\"\n                },\n                \"expectedValue\": \"100\"\n            },\n            {\n                \"inputParameter\": {\n                    \"bilangan1\": \"101\",\n                    \"bilangan2\": \"11\"\n                },\n                \"expectedValue\": \"1000\"\n            },\n            {\n                \"inputParameter\": {\n                    \"bilangan1\": \"111\",\n                    \"bilangan2\": \"111\"\n                },\n                \"expectedValue\": \"1110\"\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function binaryAddition(bilangan1: string, bilangan2: string): string {\\n    const decimal1 = parseInt(bilangan1, 2);\\n    const decimal2 = parseInt(bilangan2, 2);\\n    const sum = decimal1 + decimal2;\\n    const binarySum = sum.toString(2);\\n    return binarySum;\\n}\",\n            \"language\": \"Typescript\",\n            \"functionName\": \"binaryAddition\"\n        }\n    }\n]",
    },
      {
          role: "user",
          content:
            "logic test rumit",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Prime Factorization\",\n        \"description\": \"**Nama Soal**: Prime Factorization.\\n\\n**Deskripsi**: Dalam matematika, faktorisasi prima adalah proses menguraikan sebuah bilangan bulat positif menjadi hasil kali dari bilangan prima yang lebih kecil. Challenge ini akan menguji kemampuanmu dalam mengimplementasikan faktorisasi prima dari sebuah bilangan.\\n\\n**Aturan**:\\n- Buatlah sebuah function dengan nama primeFactorization yang menerima satu parameter bertipe integer.\\n- Function harus mengembalikan array dari faktor-faktor prima bilangan tersebut dengan urutan mulai dari faktor prima terkecil.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input adalah 24. Dalam kasus ini, hasil yang diperoleh adalah [2, 2, 2, 3]. Penjelasan lanjutan: Faktorisasi prima dari 24 adalah 2 * 2 * 2 * 3 = 24, maka kembalikanlah [2,2,2,3].\\n- Kita ambil kasus dimana parameter input adalah 36. Dalam kasus ini, hasil yang diperoleh adalah [2, 2, 3, 3]. Penjelasan lanjutan: Faktorisasi prima dari 36 adalah 2 * 2 * 3 * 3 = 36, maka kembalikanlah [2,2,3,3].\",\n        \"difficultyLevel\": 4,\n        \"timeEstimationToFinish\": \"15 minutes\",\n        \"hashtags\": \"Math, Number Theory, Array\",\n        \"inputParameter\": [\n            {\n                \"name\": \"number\",\n                \"typeData\": \"integer\"\n            }\n        ],\n        \"expectedTypeData\": \"array\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"number\": 24\n                },\n                \"expectedValue\": [\n                    2,\n                    2,\n                    2,\n                    3\n                ]\n            },\n            {\n                \"inputParameter\": {\n                    \"number\": 36\n                },\n                \"expectedValue\": [\n                    2,\n                    2,\n                    3,\n                    3\n                ]\n            },\n            {\n                \"inputParameter\": {\n                    \"number\": 7\n                },\n                \"expectedValue\": [\n                    7\n                ]\n            },\n            {\n                \"inputParameter\": {\n                    \"number\": 1024\n                },\n                \"expectedValue\": [\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    2,\n                    2\n                ]\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function primeFactorization(number: number): number[] {\\n    let factors: number[] = [];\\n    let divisor = 2;\\n    while(number > 2) {\\n        if(number % divisor === 0) {\\n            factors.push(divisor);\\n            number /= divisor;\\n        } else {\\n            divisor++;\\n        }\\n    }\\n    return factors;\\n}\",\n            \"language\": \"Typescript\",\n            \"functionName\": \"primeFactorization\"\n        }\n    }\n]",
    },
     {
          role: "user",
          content:
            "logic test rumit",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"String Compression\",\n        \"description\": \"**Nama Soal**: String Compression.\\n\\n**Deskripsi**: Kamu diminta untuk mengimplementasikan fungsi kompresi string. Fungsi ini akan mengompresi string input dengan menggantikan setiap karakter berulang dengan karakter tersebut dan jumlah kemunculannya dalam bentuk angka. Kamu harus mengembalikan string hasil kompresi tersebut. Jika string hasil kompresi lebih panjang dari string input asli, maka kembalikan string input asli.\\n\\n**Aturan**:\\n- Buatlah sebuah function dengan nama stringCompression yang menerima satu parameter bertipe string.\\n- Function harus mengembalikan string hasil kompresi.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input adalah 'aabcccccaaa'. Dalam kasus ini, hasil yang diperoleh adalah 'a2b1c5a3'. Penjelasan lanjutan: Karakter 'a' muncul 2 kali, karakter 'b' muncul 1 kali, dan karakter 'c' muncul 5 kali, sedangkan karakter 'a' muncul 3 kali. Maka kembalikanlah 'a2b1c5a3'.\\n- Kita ambil kasus dimana parameter input adalah 'abcdef'. Dalam kasus ini, hasil yang diperoleh adalah 'abcdef'. Karena string hasil kompresi ('a1b1c1d1e1f1') lebih panjang dari string input asli, maka kembalikanlah string input asli.\",\n        \"difficultyLevel\": 4,\n        \"timeEstimationToFinish\": \"15 minutes\",\n        \"hashtags\": \"String Manipulation, Compression, Algorithm\",\n        \"inputParameter\": [\n            {\n                \"name\": \"text\",\n                \"typeData\": \"string\"\n            }\n        ],\n        \"expectedTypeData\": \"string\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"text\": \"aabcccccaaa\"\n                },\n                \"expectedValue\": \"a2b1c5a3\"\n            },\n            {\n                \"inputParameter\": {\n                    \"text\": \"abcdef\"\n                },\n                \"expectedValue\": \"abcdef\"\n            },\n            {\n                \"inputParameter\": {\n                    \"text\": \"aaabbbcccddd\"\n                },\n                \"expectedValue\": \"a3b3c3d3\"\n            },\n            {\n                \"inputParameter\": {\n                    \"text\": \"abcdabcd\"\n                },\n                \"expectedValue\": \"abcdabcd\"\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function stringCompression(text: string): string {\\n    let compressedString = '';\\n    let currentChar = text[0];\\n    let currentCount = 1;\\n\\n    for (let i = 1; i < text.length; i++) {\\n        if (text[i] === currentChar) {\\n            currentCount++;\\n        } else {\\n            compressedString += currentChar + currentCount.toString();\\n            currentChar = text[i];\\n            currentCount = 1;\\n        }\\n    }\\n\\n    compressedString += currentChar + currentCount.toString();\\n\\n    if (compressedString.length >= text.length) {\\n        return text;\\n    } else {\\n        return compressedString;\\n    }\\n}\",\n            \"language\": \"Typescript\",\n            \"functionName\": \"stringCompression\"\n        }\n    }\n]",
    },
     {
          role: "user",
          content:
            "pemecahan kode",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Caesar Cipher\",\n        \"description\": \"**Nama Soal**: Caesar Cipher.\\n\\n**Deskripsi**: Caesar Cipher adalah salah satu teknik enkripsi sederhana yang sering digunakan dalam mengamankan pesan. Teknik ini menggeser setiap karakter dalam pesan sejauh n posisi dalam alfabet. Kamu diminta untuk mengimplementasikan fungsi untuk mengembalikan pesan asli dalam bentuk string berdasarkan enkripsi dengan Caesar Cipher dan angka geseran yang diberikan sebagai input.\\n\\n**Aturan**:\\n- Buatlah sebuah function dengan nama caesarCipher yang menerima dua parameter, yaitu pesan (string) dan jumlahGeseran (integer).\\n- Function harus mengembalikan pesan asli setelah dienkripsi dengan Caesar Cipher.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input pesan adalah 'HELLO' dan jumlahGeseran adalah 3. Dalam kasus ini, hasil yang diperoleh adalah 'KHOOR'. Penjelasan lanjutan: Karakter 'H' digeser sejauh 3 posisi menjadi 'K', karakter 'E' digeser sejauh 3 posisi menjadi 'H', dan seterusnya. Maka kembalikanlah 'KHOOR'.\\n- Kita ambil kasus dimana parameter input pesan adalah 'XYZ' dan jumlahGeseran adalah 5. Dalam kasus ini, hasil yang diperoleh adalah 'CDE'. Penjelasan lanjutan: Karakter 'X' digeser sejauh 5 posisi menjadi 'C', karakter 'Y' digeser sejauh 5 posisi menjadi 'D', dan karakter 'Z' digeser sejauh 5 posisi menjadi 'E'. Maka kembalikanlah 'CDE'.\",\n        \"difficultyLevel\": 2,\n        \"timeEstimationToFinish\": \"5 minutes\",\n        \"hashtags\": \"Encryption, String Manipulation, Algorithm\",\n        \"inputParameter\": [\n            {\n                \"name\": \"pesan\",\n                \"typeData\": \"string\"\n            },\n            {\n                \"name\": \"jumlahGeseran\",\n                \"typeData\": \"integer\"\n            }\n        ],\n        \"expectedTypeData\": \"string\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"pesan\": \"HELLO\",\n                    \"jumlahGeseran\": 3\n                },\n                \"expectedValue\": \"KHOOR\"\n            },\n            {\n                \"inputParameter\": {\n                    \"pesan\": \"XYZ\",\n                    \"jumlahGeseran\": 5\n                },\n                \"expectedValue\": \"CDE\"\n            },\n            {\n                \"inputParameter\": {\n                    \"pesan\": \"WHAT IS THIS\",\n                    \"jumlahGeseran\": 2\n                },\n                \"expectedValue\": \"JCVJ KU VJCV\"\n            },\n            {\n                \"inputParameter\": {\n                    \"pesan\": \"ENCRYPT ME\",\n                    \"jumlahGeseran\": 1\n                },\n                \"expectedValue\": \"FOSETDQF NF\"\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function caesarCipher(pesan: string, jumlahGeseran: number): string {\\n    let encryptedMessage = '';\\n\\n    for (let i = 0; i < pesan.length; i++) {\\n        let char = pesan[i];\\n\\n        // Jika karakter adalah huruf, lakukan geseran\\n        if (/^[A-Za-z]+$/.test(char)) {\\n            // Mendapatkan kode ASCII untuk karakter\\n            let charCode = char.charCodeAt(0);\\n\\n            // Menggeser kode ASCII sesuai jumlah geseran\\n            let shiftedCharCode = (charCode - 65 + jumlahGeseran) % 26 + 65;\\n\\n            // Mengubah kode ASCII yang digeser kembali menjadi karakter\\n            let shiftedChar = String.fromCharCode(shiftedCharCode);\\n\\n            encryptedMessage += shiftedChar;\\n        } else {\\n            // Karakter lain tidak dienkripsi\\n            encryptedMessage += char;\\n        }\\n    }\\n\\n    return encryptedMessage;\\n}\",\n            \"language\": \"Typescript\",\n            \"functionName\": \"caesarCipher\"\n        }\n    }\n]",
    },
    {
          role: "user",
          content:
            "logic test rumit google",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Isomorphic Strings\",\n        \"description\": \"**Nama Soal**: Isomorphic Strings.\\n\\n**Deskripsi**: Kamu diminta untuk mengimplementasikan fungsi untuk memeriksa apakah dua buah string isomorfik. Dua string dikatakan isomorfik jika setiap huruf di string pertama dapat digantikan dengan huruf lain sehingga string pertama menjadi string kedua. Kamu harus mengembalikan nilai true jika dua string tersebut isomorfik, dan false jika tidak isomorfik.\\n\\n**Aturan**: \\n- Buatlah sebuah function dengan nama isIsomorphic yang menerima dua parameter bertipe string.\\n- Function harus mengembalikan nilai boolean (true atau false) sesuai dengan isomorfik atau tidaknya dua string tersebut.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input string1 adalah 'egg' dan string2 adalah 'add'. Dalam kasus ini, hasil yang diperoleh adalah true. Penjelasan lanjutan: Dalam string1, karakter 'e' dapat digantikan oleh 'a', dan karakter 'g' dapat digantikan oleh huruf 'd'. Maka kembalikanlah true.\\n- Kita ambil kasus dimana parameter input string1 adalah 'paper' dan string2 adalah 'title'. Dalam kasus ini, hasil yang diperoleh adalah true. Penjelasan lanjutan: Dalam string1, karakter 'p' dapat digantikan oleh 't', karakter 'a' dapat digantikan oleh 'i', dan karakter 'e' dapat digantikan oleh 'l'. Maka kembalikanlah true.\\n- Kita ambil kasus dimana parameter input string1 adalah 'hello' dan string2 adalah 'world'. Dalam kasus ini, hasil yang diperoleh adalah false. Penjelasan lanjutan: Tidak ada penggantian karakter yang memenuhi kondisi isomorfik antara string1 dan string2. Maka kembalikanlah false.\",\n        \"difficultyLevel\": 3,\n        \"timeEstimationToFinish\": \"10 minutes\",\n        \"hashtags\": \"String Manipulation, Algorithm\",\n        \"inputParameter\": [\n            {\n                \"name\": \"string1\",\n                \"typeData\": \"string\"\n            },\n            {\n                \"name\": \"string2\",\n                \"typeData\": \"string\"\n            }\n        ],\n        \"expectedTypeData\": \"boolean\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"string1\": \"egg\",\n                    \"string2\": \"add\"\n                },\n                \"expectedValue\": true\n            },\n            {\n                \"inputParameter\": {\n                    \"string1\": \"paper\",\n                    \"string2\": \"title\"\n                },\n                \"expectedValue\": true\n            },\n            {\n                \"inputParameter\": {\n                    \"string1\": \"hello\",\n                    \"string2\": \"world\"\n                },\n                \"expectedValue\": false\n            },\n            {\n                \"inputParameter\": {\n                    \"string1\": \"foo\",\n                    \"string2\": \"bar\"\n                },\n                \"expectedValue\": false\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function isIsomorphic(string1: string, string2: string): boolean {\\n    if (string1.length !== string2.length) {\\n        return false;\\n    }\\n\\n    const map = new Map();\\n\\n    for (let i = 0; i < string1.length; i++) {\\n        const char1 = string1[i];\\n        const char2 = string2[i];\\n\\n        if (!map.has(char1)) {\\n            map.set(char1, char2);\\n        } else {\\n            if (map.get(char1) !== char2) {\\n                return false;\\n            }\\n        }\\n    }\\n\\n    return true;\\n}\",\n            \"language\": \"Typescript\",\n            \"functionName\": \"isIsomorphic\"\n        }\n    }\n]",
    },
     {
          role: "user",
          content:
            "logic test rumit google",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Longest Increasing Subsequence\",\n        \"description\": \"**Nama Soal**: Longest Increasing Subsequence.\\n\\n**Deskripsi**: Kamu diminta untuk mengimplementasikan fungsi untuk menemukan panjang dari subsequence terpanjang yang memiliki urutan peningkatan dalam sebuah array. Subsequence adalah setiap himpunan elemen dalam array yang tidak perlu berdekatan satu sama lain. Kamu harus mengembalikan panjang dari subsequence terpanjang.\\n\\n**Aturan**: \\n- Buatlah sebuah function dengan nama longestIncreasingSubsequence yang menerima satu parameter bertipe array integer.\\n- Function harus mengembalikan panjang dari subsequence terpanjang.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input array adalah [10, 9, 2, 5, 3, 7, 101, 18]. Dalam kasus ini, hasil yang diperoleh adalah 4. Penjelasan lanjutan: Subsequence terpanjang dengan urutan peningkatan dalam array tersebut adalah [2, 3, 7, 101], maka kembalikanlah 4.\\n- Kita ambil kasus dimana parameter input array adalah [10, 9, 2, 5, 3, 4]. Dalam kasus ini, hasil yang diperoleh adalah 2. Penjelasan lanjutan: Subsequence terpanjang dengan urutan peningkatan dalam array tersebut adalah [2, 5] atau [3, 4], maka kembalikanlah 2.\",\n        \"difficultyLevel\": 4,\n        \"timeEstimationToFinish\": \"15 minutes\",\n        \"hashtags\": \"Dynamic Programming, Algorithm\",\n        \"inputParameter\": [\n            {\n                \"name\": \"array\",\n                \"typeData\": \"array\"\n            }\n        ],\n        \"expectedTypeData\": \"integer\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"array\": [\n                        10,\n                        9,\n                        2,\n                        5,\n                        3,\n                        7,\n                        101,\n                        18\n                    ]\n                },\n                \"expectedValue\": 4\n            },\n            {\n                \"inputParameter\": {\n                    \"array\": [\n                        10,\n                        9,\n                        2,\n                        5,\n                        3,\n                        4\n                    ]\n                },\n                \"expectedValue\": 2\n            },\n            {\n                \"inputParameter\": {\n                    \"array\": [\n                        1,\n                        3,\n                        2,\n                        5,\n                        4,\n                        7,\n                        6\n                    ]\n                },\n                \"expectedValue\": 4\n            },\n            {\n                \"inputParameter\": {\n                    \"array\": [\n                        1,\n                        2,\n                        3,\n                        4,\n                        5\n                    ]\n                },\n                \"expectedValue\": 5\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function longestIncreasingSubsequence(array) {\\n    const n = array.length;\\n    const dp = new Array(n).fill(1);\\n\\n    for (let i = 1; i < n; i++) {\\n        for (let j = 0; j < i; j++) {\\n            if (array[i] > array[j] && dp[i] < dp[j] + 1) {\\n                dp[i] = dp[j] + 1;\\n            }\\n        }\\n    }\\n\\n    let maxLength = 0;\\n    for (let i = 0; i < n; i++) {\\n        maxLength = Math.max(maxLength, dp[i]);\\n    }\\n\\n    return maxLength;\\n}\",\n            \"language\": \"Javascript\",\n            \"functionName\": \"longestIncreasingSubsequence\"\n        }\n    }\n]",
    },
     {
          role: "user",
          content:
            "logic test rumit google",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Word Ladder\",\n        \"description\": \"**Nama Soal**: Word Ladder.\\n\\n**Deskripsi**: Dalam teori grafit, jarak ladder antara dua kata adalah jumlah minimum operasi yang diperlukan untuk mengubah satu kata menjadi kata lainnya. Pada setiap operasi, kamu dapat mengganti satu karakter dalam kata tersebut. Kamu diminta untuk mengimplementasikan fungsi untuk menemukan jarak ladder antara dua kata yang ada dalam kamus. Kamus diberikan dalam bentuk array string, dan kamu harus mengembalikan jumlah minimum operasi yang diperlukan.\\n\\n**Aturan**: \\n- Buatlah sebuah function dengan nama wordLadder yang menerima tiga parameter bertipe string, yaitu kataAwal, kataAkhir, dan kamus.\\n- Function harus mengembalikan jumlah minimum operasi yang diperlukan untuk mengubah kataAwal menjadi kataAkhir.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input kataAwal adalah 'hit', kataAkhir adalah 'cog', dan kamus adalah ['hot', 'dot', 'dog', 'lot', 'log', 'cog']. Dalam kasus ini, hasil yang diperoleh adalah 5. Penjelasan lanjutan: Salah satu jalur minimum dengan jarak ladder 5 adalah 'hit' -> 'hot' -> 'dot' -> 'dog' -> 'cog', maka kembalikanlah 5.\\n- Kita ambil kasus dimana parameter input kataAwal adalah 'hot', kataAkhir adalah 'dog', dan kamus adalah ['hot', 'dog']. Dalam kasus ini, hasil yang diperoleh adalah 0. Penjelasan lanjutan: KataAwal sama dengan kataAkhir, tidak ada operasi yang diperlukan, maka kembalikanlah 0.\",\n        \"difficultyLevel\": 5,\n        \"timeEstimationToFinish\": \"20 minutes\",\n        \"hashtags\": \"Graph, BFS, Algorithm\",\n        \"inputParameter\": [\n            {\n                \"name\": \"kataAwal\",\n                \"typeData\": \"string\"\n            },\n            {\n                \"name\": \"kataAkhir\",\n                \"typeData\": \"string\"\n            },\n            {\n                \"name\": \"kamus\",\n                \"typeData\": \"array\"\n            }\n        ],\n        \"expectedTypeData\": \"integer\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"kataAwal\": \"hit\",\n                    \"kataAkhir\": \"cog\",\n                    \"kamus\": [\n                        \"hot\",\n                        \"dot\",\n                        \"dog\",\n                        \"lot\",\n                        \"log\",\n                        \"cog\"\n                    ]\n                },\n                \"expectedValue\": 5\n            },\n            {\n                \"inputParameter\": {\n                    \"kataAwal\": \"hot\",\n                    \"kataAkhir\": \"dog\",\n                    \"kamus\": [\n                        \"hot\",\n                        \"dog\"\n                    ]\n                },\n                \"expectedValue\": 0\n            },\n            {\n                \"inputParameter\": {\n                    \"kataAwal\": \"game\",\n                    \"kataAkhir\": \"code\",\n                    \"kamus\": [\n                        \"game\",\n                        \"code\",\n                        \"cade\",\n                        \"cade\",\n                        \"cade\",\n                        \"cade\"\n                    ]\n                },\n                \"expectedValue\": 3\n            },\n            {\n                \"inputParameter\": {\n                    \"kataAwal\": \"lead\",\n                    \"kataAkhir\": \"gold\",\n                    \"kamus\": [\n                        \"wind\",\n                        \"lead\",\n                        \"load\",\n                        \"laud\",\n                        \"goad\",\n                        \"gold\"\n                    ]\n                },\n                \"expectedValue\": 4\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function wordLadder(kataAwal, kataAkhir, kamus) {\\n    // Implement your solution here\\n}\",\n            \"language\": \"Javascript\",\n            \"functionName\": \"wordLadder\"\n        }\n    }\n]",
    },
     {
          role: "user",
          content:
            "logic test rumit google",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Two Sum\",\n        \"description\": \"**Nama Soal**: Two Sum.\\n\\n**Deskripsi**: Diberikan sebuah array bilangan bulat dan sebuah target bilangan bulat, kamu diminta untuk mencari dua angka dalam array yang jumlahnya sama dengan target. Kamu harus mengembalikan indeks dari dua angka tersebut.\\n\\n**Aturan**: \\n- Buatlah sebuah function dengan nama twoSum yang menerima dua parameter bertipe array integer dan target bertipe integer.\\n- Function harus mengembalikan array dengan dua angka, yaitu indeks dari dua angka dalam array yang jumlahnya sama dengan target.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input array adalah [2, 7, 11, 15] dan target adalah 9. Dalam kasus ini, hasil yang diperoleh adalah [0, 1]. Penjelasan lanjutan: Angka 2 pada indeks 0 dan angka 7 pada indeks 1 jika dijumlahkan menghasilkan 9, maka kembalikanlah [0, 1].\\n- Kita ambil kasus dimana parameter input array adalah [3, 2, 4] dan target adalah 6. Dalam kasus ini, hasil yang diperoleh adalah [1, 2]. Penjelasan lanjutan: Angka 2 pada indeks 1 dan angka 4 pada indeks 2 jika dijumlahkan menghasilkan 6, maka kembalikanlah [1, 2].\",\n        \"difficultyLevel\": 2,\n        \"timeEstimationToFinish\": \"5 minutes\",\n        \"hashtags\": \"Array, HashTable, Two Pointers\",\n        \"inputParameter\": [\n            {\n                \"name\": \"nums\",\n                \"typeData\": \"array\"\n            },\n            {\n                \"name\": \"target\",\n                \"typeData\": \"integer\"\n            }\n        ],\n        \"expectedTypeData\": \"array\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"nums\": [\n                        2,\n                        7,\n                        11,\n                        15\n                    ],\n                    \"target\": 9\n                },\n                \"expectedValue\": [\n                    0,\n                    1\n                ]\n            },\n            {\n                \"inputParameter\": {\n                    \"nums\": [\n                        3,\n                        2,\n                        4\n                    ],\n                    \"target\": 6\n                },\n                \"expectedValue\": [\n                    1,\n                    2\n                ]\n            },\n            {\n                \"inputParameter\": {\n                    \"nums\": [\n                        0,\n                        6,\n                        8,\n                        14,\n                        20\n                    ],\n                    \"target\": 14\n                },\n                \"expectedValue\": [\n                    1,\n                    3\n                ]\n            },\n            {\n                \"inputParameter\": {\n                    \"nums\": [\n                        5,\n                        10,\n                        15,\n                        20,\n                        25\n                    ],\n                    \"target\": 30\n                },\n                \"expectedValue\": [\n                    2,\n                    3\n                ]\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function twoSum(nums, target) {\\n    const map = new Map();\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        const complement = target - nums[i];\\n\\n        if (map.has(complement)) {\\n            return [map.get(complement), i];\\n        }\\n\\n        map.set(nums[i], i);\\n    }\\n\\n    return [];\\n}\",\n            \"language\": \"Javascript\",\n            \"functionName\": \"twoSum\"\n        }\n    }\n]",
    },
      {
          role: "user",
          content:
            "logic test rumit google",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Array Max Consecutive Sum\",\n        \"description\": \"**Nama Soal**: Array Max Consecutive Sum.\\n\\n**Deskripsi**: Diberikan sebuah array bilangan bulat dan bilangan bulat k, kamu diminta untuk mencari jumlah maksimum dari k bilangan berurutan dalam array tersebut. Kamu harus mengembalikan jumlah maksimum yang didapatkan.\\n\\n**Aturan**: \\n- Buatlah sebuah function dengan nama maxConsecutiveSum yang menerima dua parameter bertipe array integer dan k bertipe integer.\\n- Function harus mengembalikan jumlah maksimum dari k bilangan berurutan dalam array tersebut.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input array adalah [1, 2, 3, 4, 5] dan k adalah 3. Dalam kasus ini, hasil yang diperoleh adalah 12. Penjelasan lanjutan: Jumlah maksimum dari 3 bilangan berurutan dalam array tersebut adalah 3 + 4 + 5 = 12, maka kembalikanlah 12.\\n- Kita ambil kasus dimana parameter input array adalah [2, 3, 5, 1, 6, 8, 9] dan k adalah 4. Dalam kasus ini, hasil yang diperoleh adalah 24. Penjelasan lanjutan: Jumlah maksimum dari 4 bilangan berurutan dalam array tersebut adalah 5 + 1 + 6 + 8 = 20, maka kembalikanlah 20.\",\n        \"difficultyLevel\": 3,\n        \"timeEstimationToFinish\": \"10 minutes\",\n        \"hashtags\": \"Array, Sliding Window, Algorithm\",\n        \"inputParameter\": [\n            {\n                \"name\": \"nums\",\n                \"typeData\": \"array\"\n            },\n            {\n                \"name\": \"k\",\n                \"typeData\": \"integer\"\n            }\n        ],\n        \"expectedTypeData\": \"integer\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"nums\": [\n                        1,\n                        2,\n                        3,\n                        4,\n                        5\n                    ],\n                    \"k\": 3\n                },\n                \"expectedValue\": 12\n            },\n            {\n                \"inputParameter\": {\n                    \"nums\": [\n                        2,\n                        3,\n                        5,\n                        1,\n                        6,\n                        8,\n                        9\n                    ],\n                    \"k\": 4\n                },\n                \"expectedValue\": 24\n            },\n            {\n                \"inputParameter\": {\n                    \"nums\": [\n                        -1,\n                        -2,\n                        -3,\n                        -4,\n                        -5\n                    ],\n                    \"k\": 2\n                },\n                \"expectedValue\": -3\n            },\n            {\n                \"inputParameter\": {\n                    \"nums\": [\n                        10,\n                        -3,\n                        4,\n                        -2,\n                        1,\n                        -1,\n                        3,\n                        -1\n                    ],\n                    \"k\": 5\n                },\n                \"expectedValue\": 13\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function maxConsecutiveSum(nums, k) {\\n    let maxSum = -Infinity;\\n    let currentSum = 0;\\n\\n    for (let i = 0; i < nums.length; i++) {\\n        currentSum += nums[i];\\n\\n        if (i >= k) {\\n            currentSum -= nums[i - k];\\n        }\\n\\n        if (currentSum > maxSum) {\\n            maxSum = currentSum;\\n        }\\n    }\\n\\n    return maxSum;\\n}\",\n            \"language\": \"Javascript\",\n            \"functionName\": \"maxConsecutiveSum\"\n        }\n    }\n]",
    },
     {
          role: "user",
          content:
            "logic test rumit google",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"Longest Palindromic Substring\",\n        \"description\": \"**Nama Soal**: Longest Palindromic Substring.\\n\\n**Deskripsi**: Diberikan sebuah string, kamu diminta untuk mencari substring palindrom terpanjang dalam string tersebut. Substring palindrom adalah substring yang dapat dibaca sama dari depan maupun belakang. Kamu harus mengembalikan substring palindrom terpanjang tersebut.\\n\\n**Aturan**: \\n- Buatlah sebuah function dengan nama longestPalindromicSubstring yang menerima satu parameter bertipe string.\\n- Function harus mengembalikan substring palindrom terpanjang dalam string tersebut.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input adalah 'babad'. Dalam kasus ini, hasil yang diperoleh adalah 'bab'. Penjelasan lanjutan: Substring palindrom terpanjang dalam string tersebut adalah 'bab' (dapat dibaca sama dari depan maupun belakang), maka kembalikanlah 'bab'.\\n- Kita ambil kasus dimana parameter input adalah 'cbbd'. Dalam kasus ini, hasil yang diperoleh adalah 'bb'. Penjelasan lanjutan: Substring palindrom terpanjang dalam string tersebut adalah 'bb' (dapat dibaca sama dari depan maupun belakang), maka kembalikanlah 'bb'.\",\n        \"difficultyLevel\": 4,\n        \"timeEstimationToFinish\": \"15 minutes\",\n        \"hashtags\": \"String Manipulation, Dynamic Programming, Algorithm\",\n        \"inputParameter\": [\n            {\n                \"name\": \"string\",\n                \"typeData\": \"string\"\n            }\n        ],\n        \"expectedTypeData\": \"string\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"string\": \"babad\"\n                },\n                \"expectedValue\": \"bab\"\n            },\n            {\n                \"inputParameter\": {\n                    \"string\": \"cbbd\"\n                },\n                \"expectedValue\": \"bb\"\n            },\n            {\n                \"inputParameter\": {\n                    \"string\": \"racecar\"\n                },\n                \"expectedValue\": \"racecar\"\n            },\n            {\n                \"inputParameter\": {\n                    \"string\": \"abcdabcd\"\n                },\n                \"expectedValue\": \"cdc\"\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function longestPalindromicSubstring(string) {\\n    let longest = '';\\n\\n    const expandAroundCenter = (left, right) => {\\n        while (left >= 0 && right < string.length && string[left] === string[right]) {\\n            left--;\\n            right++;\\n        }\\n\\n        const currentPalindrome = string.slice(left + 1, right);\\n        if (currentPalindrome.length > longest.length) {\\n            longest = currentPalindrome;\\n        }\\n    }\\n\\n    for (let i = 0; i < string.length; i++) {\\n        expandAroundCenter(i, i); // For odd length palindrome\\n        expandAroundCenter(i, i + 1); // For even length palindrome\\n    }\\n\\n    return longest;\\n}\",\n            \"language\": \"Javascript\",\n            \"functionName\": \"longestPalindromicSubstring\"\n        }\n    }\n]",
    },
    {
          role: "user",
          content:
            "logic test rumit google",
        },
        {
          role: "assistant",
          content: "[\n    {\n        \"title\": \"GCD and LCM\",\n        \"description\": \"**Nama Soal**: GCD and LCM.\\n\\n**Deskripsi**: Dalam matematika, GCD (Greatest Common Divisor) adalah bilangan bulat positif terbesar yang membagi habis dua atau lebih bilangan, sedangkan LCM (Least Common Multiple) adalah kelipatan terkecil dari dua atau lebih bilangan. Kamu diminta untuk mengimplementasikan fungsi untuk menghitung GCD dan LCM dari dua bilangan yang diberikan.\\n\\n**Aturan**: \\n- Buatlah sebuah function dengan nama gcdLcm yang menerima dua parameter bertipe integer.\\n- Function harus mengembalikan array dengan dua elemen, yaitu GCD dan LCM dari dua bilangan tersebut.\\n\\n**Contoh Kasus**:\\n- Kita ambil kasus dimana parameter input adalah 12 dan 18. Dalam kasus ini, hasil yang diperoleh adalah [6, 36]. Penjelasan lanjutan: GCD dari 12 dan 18 adalah 6, sedangkan LCM dari 12 dan 18 adalah 36, maka kembalikanlah [6, 36].\\n- Kita ambil kasus dimana parameter input adalah 8 dan 15. Dalam kasus ini, hasil yang diperoleh adalah [1, 120]. Penjelasan lanjutan: GCD dari 8 dan 15 adalah 1, sedangkan LCM dari 8 dan 15 adalah 120, maka kembalikanlah [1, 120].\",\n        \"difficultyLevel\": 3,\n        \"timeEstimationToFinish\": \"10 minutes\",\n        \"hashtags\": \"Mathematics, GCD, LCM\",\n        \"inputParameter\": [\n            {\n                \"name\": \"num1\",\n                \"typeData\": \"integer\"\n            },\n            {\n                \"name\": \"num2\",\n                \"typeData\": \"integer\"\n            }\n        ],\n        \"expectedTypeData\": \"array\",\n        \"testCase\": [\n            {\n                \"inputParameter\": {\n                    \"num1\": 12,\n                    \"num2\": 18\n                },\n                \"expectedValue\": [\n                    6,\n                    36\n                ]\n            },\n            {\n                \"inputParameter\": {\n                    \"num1\": 8,\n                    \"num2\": 15\n                },\n                \"expectedValue\": [\n                    1,\n                    120\n                ]\n            },\n            {\n                \"inputParameter\": {\n                    \"num1\": 24,\n                    \"num2\": 36\n                },\n                \"expectedValue\": [\n                    12,\n                    72\n                ]\n            },\n            {\n                \"inputParameter\": {\n                    \"num1\": 7,\n                    \"num2\": 9\n                },\n                \"expectedValue\": [\n                    1,\n                    63\n                ]\n            }\n        ],\n        \"implementation\": {\n            \"function\": \"function gcdLcm(num1, num2) {\\n    const gcd = calculateGCD(num1, num2);\\n    const lcm = (num1 * num2) / gcd;\\n    return [gcd, lcm];\\n}\\n\\nfunction calculateGCD(a, b) {\\n    if (b === 0) {\\n        return a;\\n    }\\n\\n    return calculateGCD(b, a % b);\\n}\",\n            \"language\": \"Javascript\",\n            \"functionName\": \"gcdLcm\"\n        }\n    }\n]",
    },
      {
        role: "user",
        content: prompt,
      },
  ];

  return messages;
}
